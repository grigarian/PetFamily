// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PetFamily.Infrastructure;

#nullable disable

namespace PetFamily.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240821194735_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PetFamily.Domain.Models.PetModel.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("Birthday")
                        .HasMaxLength(9)
                        .HasColumnType("date");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasMaxLength(9)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("HealthInfo")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<double>("Hight")
                        .HasMaxLength(100)
                        .HasColumnType("double precision");

                    b.Property<bool>("IsCastrated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasMaxLength(100)
                        .HasColumnType("double precision");

                    b.Property<bool>("isVaccinated")
                        .HasColumnType("boolean");

                    b.Property<Guid>("volunteer_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("volunteer_id");

                    b.ToTable("pets", (string)null);
                });

            modelBuilder.Entity("PetFamily.Domain.Models.PetModel.PetPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsMainPhoto")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("volunteer_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("volunteer_id");

                    b.ToTable("PetPhoto");
                });

            modelBuilder.Entity("PetFamily.Domain.Models.Volunteer.Volunteer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountPetBeingTreated")
                        .HasMaxLength(2)
                        .HasColumnType("integer");

                    b.Property<int>("CountPetFoundHome")
                        .HasMaxLength(2)
                        .HasColumnType("integer");

                    b.Property<int>("CountPetLookingForHome")
                        .HasMaxLength(2)
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<int>("WorkExpirience")
                        .HasMaxLength(2)
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("volunteers", (string)null);
                });

            modelBuilder.Entity("PetFamily.Domain.Models.PetModel.Pet", b =>
                {
                    b.HasOne("PetFamily.Domain.Models.Volunteer.Volunteer", null)
                        .WithMany("Pets")
                        .HasForeignKey("volunteer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PetFamily.Domain.Models.Shared.ListRequisites", "Requisites", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid");

                            b1.HasKey("PetId");

                            b1.ToTable("pets");

                            b1.ToJson("Requisites");

                            b1.WithOwner()
                                .HasForeignKey("PetId");

                            b1.OwnsMany("PetFamily.Domain.Models.Shared.Requisite", "Requisites", b2 =>
                                {
                                    b2.Property<Guid>("ListRequisitesPetId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("ListRequisitesPetId", "Id");

                                    b2.ToTable("pets");

                                    b2.WithOwner()
                                        .HasForeignKey("ListRequisitesPetId");
                                });

                            b1.Navigation("Requisites");
                        });

                    b.OwnsOne("PetFamily.Domain.Models.PetModel.PetStatus", "PetStatus", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PetId");

                            b1.ToTable("pets");

                            b1.WithOwner()
                                .HasForeignKey("PetId");
                        });

                    b.Navigation("PetStatus")
                        .IsRequired();

                    b.Navigation("Requisites")
                        .IsRequired();
                });

            modelBuilder.Entity("PetFamily.Domain.Models.PetModel.PetPhoto", b =>
                {
                    b.HasOne("PetFamily.Domain.Models.PetModel.Pet", null)
                        .WithMany("PetPhotos")
                        .HasForeignKey("volunteer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetFamily.Domain.Models.Volunteer.Volunteer", b =>
                {
                    b.OwnsOne("PetFamily.Domain.Models.Shared.ListRequisites", "Requisites", b1 =>
                        {
                            b1.Property<Guid>("VolunteerID")
                                .HasColumnType("uuid");

                            b1.HasKey("VolunteerID");

                            b1.ToTable("volunteers");

                            b1.ToJson("Requisites");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerID");

                            b1.OwnsMany("PetFamily.Domain.Models.Shared.Requisite", "Requisites", b2 =>
                                {
                                    b2.Property<Guid>("ListRequisitesVolunteerID")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("ListRequisitesVolunteerID", "Id");

                                    b2.ToTable("volunteers");

                                    b2.WithOwner()
                                        .HasForeignKey("ListRequisitesVolunteerID");
                                });

                            b1.Navigation("Requisites");
                        });

                    b.OwnsOne("PetFamily.Domain.Models.VolunteerModel.ListSocialNetworks", "SocialNetworks", b1 =>
                        {
                            b1.Property<Guid>("VolunteerID")
                                .HasColumnType("uuid");

                            b1.HasKey("VolunteerID");

                            b1.ToTable("volunteers");

                            b1.ToJson("SocialNetworks");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerID");

                            b1.OwnsMany("PetFamily.Domain.Models.Volunteer.SocialNetwork", "SocialNetworks", b2 =>
                                {
                                    b2.Property<Guid>("ListSocialNetworksVolunteerID")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Link")
                                        .IsRequired()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("ListSocialNetworksVolunteerID", "Id");

                                    b2.ToTable("volunteers");

                                    b2.WithOwner()
                                        .HasForeignKey("ListSocialNetworksVolunteerID");
                                });

                            b1.Navigation("SocialNetworks");
                        });

                    b.Navigation("Requisites")
                        .IsRequired();

                    b.Navigation("SocialNetworks")
                        .IsRequired();
                });

            modelBuilder.Entity("PetFamily.Domain.Models.PetModel.Pet", b =>
                {
                    b.Navigation("PetPhotos");
                });

            modelBuilder.Entity("PetFamily.Domain.Models.Volunteer.Volunteer", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
